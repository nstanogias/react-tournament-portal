{"version":3,"sources":["store/action-types/index.ts","theme.ts","GlobalStyle.ts","store/reducers/index.ts","components/Text/Text.tsx","store/store.ts","components/Container/Container.tsx","components/Text/styled.ts","hooks.ts","constants/api.ts","store/action-creators/index.ts","components/Input/styled.ts","components/Input/Input.tsx","components/Button/styled.ts","components/Button/Button.tsx","components/Card/styled.ts","components/Card/Card.tsx","index.tsx"],"names":["ActionType","theme","palette","primary","main","light","dark","secondary","attention","background","body","base","alt1","alt2","text","spacing","multiplier","borderRadius","typography","h1","h2","h3","h4","h5","h6","button","GlobalStyle","createGlobalStyle","normalize","TextType","initialState","tournaments","loading","error","tournamentsReducer","state","action","type","GET_TOURNAMENTS_START","GET_TOURNAMENTS_SUCCESS","payload","GET_TOURNAMENTS_ERROR","ADD_TOURNAMENT","UPDATE_TOURNAMENT","map","tournament","id","DELETE_TOURNAMENT","filter","store","createStore","applyMiddleware","thunk","Container","styled","div","Styled","Heading4","Heading6","Paragraph","p","CenteredTextWrapper","textTemplates","H4","children","H6","DEFAULT","Text","textType","useAppDispatch","useDispatch","useAppSelector","useSelector","API_TOURNAMENTS_URL","getTournaments","dispatch","a","axios","get","then","response","data","name","toLowerCase","includes","catch","message","InputWrapper","input","Input","placeholder","useState","setFilter","inputRef","useRef","useEffect","timer","setTimeout","current","value","clearTimeout","ref","onChange","event","target","Button","onClick","CardFrame","ButtonsWrapper","Grid","moment","locale","Card","onConfirmEdit","onConfirmDelete","organizer","game","participants","startDate","max","format","newName","prompt","window","confirm","Wrapper","CenteredWrapper","App","handleCreateTournament","post","newTournament","console","log","addTournament","handleEditTournament","put","editTournament","handleDeleteTournament","delete","deleteTournament","length","ReactDOM","render","document","getElementById"],"mappings":"oHAAYA,E,6DCANC,EAAQ,CACZC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,MAAO,UACPC,KAAM,WAERC,UAAW,CACTH,KAAM,UACNC,MAAO,UACPC,KAAM,WAERE,UAAW,CACTJ,KAAM,UACNC,MAAO,UACPC,KAAM,UAERG,WAAY,CACVC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,KAAM,WAERC,KAAM,CACJX,QAAS,SAGbY,QAAS,eAACC,EAAD,uDAAc,EAAd,gBAAuB,EAAIA,EAA3B,OACTC,aAAc,MACdC,WAAY,CACVC,GAAI,CACF,cAAe,OACf,YAAa,QAEfC,GAAI,CACF,cAAe,OACf,YAAa,QAEfC,GAAI,CACF,cAAe,OACf,YAAa,QAEfC,GAAI,CACF,cAAe,OACf,YAAa,QAEfC,GAAI,CACF,cAAe,OACf,YAAa,QAEfC,GAAI,CACF,cAAe,OACf,YAAa,QAEfd,KAAM,CACJ,cAAe,SACf,YAAa,QAEfe,OAAQ,CACN,cAAe,OACf,YAAa,OACb,iBAAkB,eAKTxB,ICnDAyB,EAXKC,YAAH,+HACbC,IAIc3B,EAAMC,QAAQO,WAAWC,KAC9BT,EAAMC,QAAQY,KAAKX,QAC1BF,EAAMiB,WAAWR,M,kCFXXV,K,8CAAAA,E,kDAAAA,E,8CAAAA,E,gCAAAA,E,sCAAAA,E,uCAAAA,M,KGkBZ,I,YCdY6B,EDcNC,EAAiC,CACrCC,YAAa,GACbC,SAAS,EACTC,MAAO,MAmDMC,EAhDY,WAGH,IAFtBC,EAEqB,uDAFKL,EAC1BM,EACqB,uCACrB,OAAQA,EAAOC,MACb,KAAKrC,EAAWsC,sBACd,OAAO,2BACFH,GADL,IAEEH,SAAS,IAEb,KAAKhC,EAAWuC,wBACd,OAAO,2BACFJ,GADL,IAEEH,SAAS,EACTD,YAAaK,EAAOI,UAExB,KAAKxC,EAAWyC,sBACd,MAAO,CACLT,SAAS,EACTD,YAAY,YAAKI,EAAMJ,aACvBE,MAAOG,EAAOI,SAElB,KAAKxC,EAAW0C,eACd,OAAO,2BACFP,GADL,IAEEJ,YAAY,GAAD,mBAAMI,EAAMJ,aAAZ,CAAyBK,EAAOI,YAE/C,KAAKxC,EAAW2C,kBACd,OAAO,2BACFR,GADL,IAEEJ,YAAaI,EAAMJ,YAAYa,KAAI,SAAAC,GAAU,OAC3CA,EAAWC,KAAOV,EAAOI,QAAQM,GAAjC,2BACSD,GAAeT,EAAOI,SAC3BK,OAGV,KAAK7C,EAAW+C,kBACd,OAAO,2BACFZ,GADL,IAEEJ,YAAaI,EAAMJ,YAAYiB,QAC7B,SAAAH,GAAU,OAAIA,EAAWC,KAAOV,EAAOI,aAG7C,QACE,OAAOL,IE/DAc,EAAQC,YAAYhB,EAAoBiB,YAAgBC,MCKtDC,EAPGC,IAAOC,IAAV,iHAECtD,EAAMc,QAAQ,I,OCoBjByC,EAAS,CACpBC,SAvBeH,IAAOhC,GAAV,wEACVrB,EAAMiB,WAAWI,GAEFrB,EAAMc,QAAQ,IAqB/B2C,SAlBeJ,IAAO9B,GAAV,wEACVvB,EAAMiB,WAAWM,GAEFvB,EAAMc,QAAQ,IAgB/B4C,UAbgBL,IAAOM,EAAV,0BAcbC,oBAZ0BP,IAAOC,IAAV,mG,iBHbb1B,K,QAAAA,E,QAAAA,E,mBAAAA,M,KAWZ,I,UAAMiC,GAAa,mBAChBjC,EAASkC,IAAK,SAACC,GAAD,OACb,cAACR,EAAOC,SAAR,UAAkBO,OAFH,cAIhBnC,EAASoC,IAAK,SAACD,GAAD,OACb,cAACR,EAAOE,SAAR,UAAkBM,OALH,cAOhBnC,EAASqC,SAAU,SAACF,GAAD,OAClB,cAACR,EAAOG,UAAR,UAAmBK,OARJ,GAYNG,EAAO,SAAC,GAAmD,IAAD,IAAhDC,gBAAgD,MAArC,UAAqC,EAA1BJ,EAA0B,EAA1BA,SAC3C,OAAOF,EAAcM,GAAUJ,I,QIxBpBK,EAAiB,kBAAMC,eACvBC,EAAkDC,I,yCCHlDC,EAAmB,UAFJ,wBAEI,gBCKnBC,EAAiB,SAAC1B,GAAD,8CAAoB,WAChD2B,GADgD,SAAAC,EAAA,sDAGhDD,EAAS,CACPtC,KAAMrC,EAAWsC,wBAGnBuC,IACGC,IADH,UACUL,IACPM,MAAK,SAAAC,GACJ,IAAMjD,EAAciD,EAASC,KAC7BN,EAAS,CACPtC,KAAMrC,EAAWuC,wBACjBC,QAAST,EAAYiB,QAAO,SAACH,GAAD,OAC1BA,EAAWqC,KAAKC,cAAcC,SAASpC,WAI5CqC,OAAM,SAAApD,GACL0C,EAAS,CACPtC,KAAMrC,EAAWyC,sBACjBD,QAASP,EAAMqD,aArB2B,2CAApB,uDCJjBC,EAAejC,IAAOkC,MAAV,gGACTvF,EAAMC,QAAQO,WAAWE,KAC5BV,EAAMc,QAAQ,GAEhBd,EAAMC,QAAQY,KAAKX,SCEjBsF,EAAmB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjC,EAA4BC,mBAAS,IAArC,mBAAO3C,EAAP,KAAe4C,EAAf,KACMC,EAAWC,mBACXnB,EAAWN,IAajB,OAXA0B,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACnBjD,IAAY6C,EAASK,QAAgBC,OACvCxB,EAASD,EAAe1B,MAEzB,KACH,OAAO,WACLoD,aAAaJ,MAEd,CAAChD,EAAQ6C,IAGV,cAACN,EAAD,CACEc,IAAKR,EACLH,YAAaA,EACbY,SAAU,SAAAC,GAAK,OAAIX,EAAUW,EAAMC,OAAOL,QAC1CA,MAAOnD,K,iBCRAQ,I,MAAS,CAAEiD,OAnBTnD,IAAO7B,OAAV,mRAEUxB,EAAMC,QAAQK,UAAUH,KAC3BH,EAAMgB,aACdhB,EAAMC,QAAQC,QAAQC,KACpBH,EAAMc,QAAQ,GACvBd,EAAMiB,WAAWO,OAGGxB,EAAMC,QAAQK,UAAUF,MACnCJ,EAAMC,QAAQC,QAAQE,MAIXJ,EAAMC,QAAQK,UAAUD,KACnCL,EAAMC,QAAQC,QAAQG,QCTtBmG,GAA0B,SAAC,GAAwC,IAAtCzC,EAAqC,EAArCA,SAAU0C,EAA2B,EAA3BA,QAClD,OAAO,cAAC,GAAOD,OAAR,CAAeC,QAASA,EAAxB,SAAkC1C,KCP9B2C,GAAYrD,IAAOC,IAAV,qJAENtD,EAAMC,QAAQO,WAAWE,MAS5BiG,GAAiBtD,IAAOC,IAAV,sFAMdsD,GAAOvD,IAAOC,IAAV,gICZjBuD,IAAOC,OAAO,SAQP,I,MAAMC,GAAkB,SAAC,GAIzB,IAHLnE,EAGI,EAHJA,WACAoE,EAEI,EAFJA,cACAC,EACI,EADJA,gBAEQhC,EAAmDrC,EAAnDqC,KAAMiC,EAA6CtE,EAA7CsE,UAAWC,EAAkCvE,EAAlCuE,KAAMC,EAA4BxE,EAA5BwE,aAAcC,EAAczE,EAAdyE,UAc7C,OACE,eAACX,GAAD,WACE,cAACxC,EAAD,CAAMC,SAAS,KAAf,SAAqBc,IACrB,eAACf,EAAD,yBAAkBgD,KAClB,eAAChD,EAAD,oBAAaiD,KACb,eAACjD,EAAD,4BACiBkD,EAAanB,QAD9B,IACwCmB,EAAaE,OAErD,eAACpD,EAAD,qBAAc2C,IAAOQ,GAAWE,OAAO,2BACvC,eAACZ,GAAD,WACE,cAAC,GAAD,CACEF,QAAS,WAvBS,IAACe,KAwBCC,OAAO,uBAAwBxC,KAtBvD+B,EAAcQ,IAoBZ,kBAOA,cAAC,GAAD,CAAQf,QAvBc,WACtBiB,OAAOC,QAAQ,kDACjBV,KAqBE,2BC9BFW,GAAUvE,IAAOC,IAAV,mFAKPuE,GAAkBxE,IAAOC,IAAV,0EAKfwE,GAAgB,WACpB,IAAMhG,EAAcwC,GAAe,SAAApC,GAAK,OAAIA,EAAMJ,eAC5CC,EAAUuC,GAAe,SAAApC,GAAK,OAAIA,EAAMH,WACxCC,EAAQsC,GAAe,SAAApC,GAAK,OAAIA,EAAMF,SACtC0C,EAAWN,IAEX2D,EAAyB,SAAC9C,GAC1BA,GACFP,EPPuB,SAACO,GAAD,8CAAkB,WAC7CP,GAD6C,SAAAC,EAAA,sDAG7CC,IACGoD,KADH,UACWxD,GAAuB,CAAES,SACjCH,MAAK,SAAAC,GACJ,IAAMkD,EAAgBlD,EAASC,KAC/BN,EAAS,CACPtC,KAAMrC,EAAW0C,eACjBF,QAAS0F,OAGZ7C,OAAM,SAAApD,GACLkG,QAAQC,IAAInG,MAb6B,2CAAlB,sDOOdoG,CAAcnD,KAIrBoD,EAAuB,SAACzF,GAC5B8B,EPK0B,SAAC9B,GAAD,8CAA4B,WACxD8B,GADwD,SAAAC,EAAA,sDAGxDC,IACG0D,IADH,UACU9D,EADV,YACiC5B,EAAWC,IAAMD,GAC/CkC,MAAK,SAAAC,GACJL,EAAS,CACPtC,KAAMrC,EAAW2C,kBACjBH,QAASK,OAGZwC,OAAM,SAAApD,GACLkG,QAAQC,IAAInG,MAZwC,2CAA5B,sDOLjBuG,CAAe3F,KAGpB4F,EAAyB,SAAC3F,GAC9B6B,EPiB4B,SAAC7B,GAAD,8CAAgB,WAC9C6B,GAD8C,SAAAC,EAAA,sDAG9CC,IACG6D,OADH,UACajE,EADb,YACoC3B,IACjCiC,MAAK,SAAAC,GACJL,EAAS,CACPtC,KAAMrC,EAAW+C,kBACjBP,QAASM,OAGZuC,OAAM,SAAApD,GACLkG,QAAQC,IAAInG,MAZ8B,2CAAhB,sDOjBnB0G,CAAiB7F,KAO5B,OACE,eAAC,EAAD,WACE,cAACqB,EAAD,CAAMC,SAAS,KAAf,yBACA,eAACyD,GAAD,WACE,cAAC,EAAD,CAAOnC,YAAY,0BACnB,cAAC,GAAD,CACEgB,QAAS,kBAAMsB,EAAuBN,OAAO,sBAD/C,kCAMD1F,GACC,cAACwB,EAAOK,oBAAR,UACE,cAACM,EAAD,uCAGHlC,GACC,eAAC6F,GAAD,WACE,cAAC3D,EAAD,oCACA,cAAC,GAAD,CAAQuC,QAvBI,WAClB/B,EAASD,EAAe,MAsBlB,sBAGH3C,EAAY6G,OAAS,GACpB,cAAC/B,GAAD,UACG9E,EAAYa,KAAI,SAACC,GAAD,OACf,cAAC,GAAD,CAEEA,WAAYA,EACZoE,cAAe,SAAC/B,GAAD,OACboD,EAAqB,2BAAKzF,GAAN,IAAkBqC,WAExCgC,gBAAiB,kBAAMuB,EAAuB5F,EAAWC,MALpDD,EAAWC,SAUA,IAAvBf,EAAY6G,QACX,cAACpF,EAAOK,oBAAR,UACE,cAACM,EAAD,yCAOV0E,IAASC,OACP,eAAC,IAAD,CAAU7F,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,GAAD,OAEF8F,SAASC,eAAe,W","file":"static/js/main.8eafceb6.chunk.js","sourcesContent":["export enum ActionType {\n  GET_TOURNAMENTS_START = 'GET_TOURNAMENTS_START',\n  GET_TOURNAMENTS_SUCCESS = 'GET_TOURNAMENTS_SUCCESS',\n  GET_TOURNAMENTS_ERROR = 'GET_TOURNAMENTS_ERROR',\n  ADD_TOURNAMENT = 'ADD_TOURNAMENT',\n  DELETE_TOURNAMENT = 'DELETE_TOURNAMENT',\n  UPDATE_TOURNAMENT = 'UPDATE_TOURNAMENT'\n}\n","const theme = {\n  palette: {\n    primary: {\n      main: '#FF5500',\n      light: '#FD6E35',\n      dark: '#CC4400'\n    },\n    secondary: {\n      main: '#FF5500',\n      light: '#FD6E35',\n      dark: '#CC4400'\n    },\n    attention: {\n      main: '#D64242',\n      light: '#F04A4A',\n      dark: 'BD3A3A'\n    },\n    background: {\n      body: '#161616',\n      base: '#1F1F1F',\n      alt1: '#303030',\n      alt2: '#484848'\n    },\n    text: {\n      primary: '#FFF'\n    }\n  },\n  spacing: (multiplier = 1) => `${4 * multiplier}px`,\n  borderRadius: '4px',\n  typography: {\n    h1: {\n      'font-weight': 'bold',\n      'font-size': '68px'\n    },\n    h2: {\n      'font-weight': 'bold',\n      'font-size': '50px'\n    },\n    h3: {\n      'font-weight': 'bold',\n      'font-size': '38px'\n    },\n    h4: {\n      'font-weight': 'bold',\n      'font-size': '28px'\n    },\n    h5: {\n      'font-weight': 'bold',\n      'font-size': '22px'\n    },\n    h6: {\n      'font-weight': 'bold',\n      'font-size': '16px'\n    },\n    body: {\n      'font-weight': 'normal',\n      'font-size': '14px'\n    },\n    button: {\n      'font-weight': 'bold',\n      'font-size': '14px',\n      'text-transform': 'uppercase'\n    }\n  }\n};\n\nexport default theme;\n","import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'polished';\nimport theme from './theme';\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize};\n\n  body {\n    font-family: 'Play';\n    background: ${theme.palette.background.body};\n    color: ${theme.palette.text.primary};\n    ${theme.typography.body};\n  }\n`;\n\nexport default GlobalStyle;\n","import { ActionType } from '../action-types';\nimport { Action } from '../actions';\n\nexport interface Tournament {\n  id: string;\n  name: string;\n  organizer: string;\n  game: string;\n  participants: { current: number; max: number };\n  startDate: string;\n}\n\nexport interface TournamentsState {\n  tournaments: Tournament[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: TournamentsState = {\n  tournaments: [],\n  loading: false,\n  error: null\n};\n\nconst tournamentsReducer = (\n  state: TournamentsState = initialState,\n  action: Action\n): TournamentsState => {\n  switch (action.type) {\n    case ActionType.GET_TOURNAMENTS_START:\n      return {\n        ...state,\n        loading: true\n      };\n    case ActionType.GET_TOURNAMENTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        tournaments: action.payload\n      };\n    case ActionType.GET_TOURNAMENTS_ERROR:\n      return {\n        loading: false,\n        tournaments: [...state.tournaments],\n        error: action.payload\n      };\n    case ActionType.ADD_TOURNAMENT:\n      return {\n        ...state,\n        tournaments: [...state.tournaments, action.payload]\n      };\n    case ActionType.UPDATE_TOURNAMENT:\n      return {\n        ...state,\n        tournaments: state.tournaments.map(tournament =>\n          tournament.id === action.payload.id\n            ? { ...tournament, ...action.payload }\n            : tournament\n        )\n      };\n    case ActionType.DELETE_TOURNAMENT:\n      return {\n        ...state,\n        tournaments: state.tournaments.filter(\n          tournament => tournament.id !== action.payload\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport default tournamentsReducer;\n","import React from 'react';\nimport { Styled } from './styled';\nimport { ReactNode } from 'react';\n\nexport enum TextType {\n  H4 = 'h4',\n  H6 = 'h6',\n  DEFAULT = 'default'\n}\n\ntype TextProps = {\n  textType?: 'h4' | 'h6' | 'default';\n  children?: ReactNode;\n};\n\nconst textTemplates = {\n  [TextType.H4]: (children: any) => (\n    <Styled.Heading4>{children}</Styled.Heading4>\n  ),\n  [TextType.H6]: (children: any) => (\n    <Styled.Heading6>{children}</Styled.Heading6>\n  ),\n  [TextType.DEFAULT]: (children: any) => (\n    <Styled.Paragraph>{children}</Styled.Paragraph>\n  )\n};\n\nexport const Text = ({ textType = 'default', children }: TextProps) => {\n  return textTemplates[textType](children);\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk, { ThunkDispatch } from 'redux-thunk';\nimport { Action } from './actions';\nimport tournamentsReducer, { TournamentsState } from './reducers';\n\nexport const store = createStore(tournamentsReducer, applyMiddleware(thunk));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = ThunkDispatch<TournamentsState, any, Action>;\n","import styled from 'styled-components';\nimport theme from '../../theme';\n\nconst Container = styled.div`\n  max-width: 960px;\n  margin-top: ${theme.spacing(6)};\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport default Container;\n","import styled from 'styled-components';\nimport theme from '../../theme';\n\nconst Heading4 = styled.h4`\n  ${theme.typography.h4};\n  margin: 0;\n  margin-bottom: ${theme.spacing(6)};\n`;\n\nconst Heading6 = styled.h6`\n  ${theme.typography.h6};\n  margin: 0;\n  margin-bottom: ${theme.spacing(4)};\n`;\n\nconst Paragraph = styled.p``;\n\nconst CenteredTextWrapper = styled.div`\n  margin-top: 16px;\n  display: flex;\n  p {\n    margin: auto;\n  }\n`;\n\nexport const Styled = {\n  Heading4,\n  Heading6,\n  Paragraph,\n  CenteredTextWrapper\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from './store/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const API_BASE_URL = 'http://localhost:3000';\n\nexport const API_TOURNAMENTS_URL = `${API_BASE_URL}/tournaments`;\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { API_TOURNAMENTS_URL } from '../../constants/api';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Tournament } from '../reducers';\n\nexport const getTournaments = (filter: string) => async (\n  dispatch: Dispatch<Action>\n) => {\n  dispatch({\n    type: ActionType.GET_TOURNAMENTS_START\n  });\n\n  axios\n    .get(`${API_TOURNAMENTS_URL}`)\n    .then(response => {\n      const tournaments = response.data;\n      dispatch({\n        type: ActionType.GET_TOURNAMENTS_SUCCESS,\n        payload: tournaments.filter((tournament: Tournament) =>\n          tournament.name.toLowerCase().includes(filter)\n        )\n      });\n    })\n    .catch(error => {\n      dispatch({\n        type: ActionType.GET_TOURNAMENTS_ERROR,\n        payload: error.message\n      });\n    });\n};\n\nexport const addTournament = (name: string) => async (\n  dispatch: Dispatch<Action>\n) => {\n  axios\n    .post(`${API_TOURNAMENTS_URL}`, { name })\n    .then(response => {\n      const newTournament = response.data;\n      dispatch({\n        type: ActionType.ADD_TOURNAMENT,\n        payload: newTournament\n      });\n    })\n    .catch(error => {\n      console.log(error);\n    });\n};\n\nexport const editTournament = (tournament: Tournament) => async (\n  dispatch: Dispatch<Action>\n) => {\n  axios\n    .put(`${API_TOURNAMENTS_URL}/${tournament.id}`, tournament)\n    .then(response => {\n      dispatch({\n        type: ActionType.UPDATE_TOURNAMENT,\n        payload: tournament\n      });\n    })\n    .catch(error => {\n      console.log(error);\n    });\n};\n\nexport const deleteTournament = (id: string) => async (\n  dispatch: Dispatch<Action>\n) => {\n  axios\n    .delete(`${API_TOURNAMENTS_URL}/${id}`)\n    .then(response => {\n      dispatch({\n        type: ActionType.DELETE_TOURNAMENT,\n        payload: id\n      });\n    })\n    .catch(error => {\n      console.log(error);\n    });\n};\n","import styled from 'styled-components';\nimport theme from '../../theme';\n\nexport const InputWrapper = styled.input`\n  background: ${theme.palette.background.base};\n  padding: ${theme.spacing(2)};\n  border: none;\n  color: ${theme.palette.text.primary};\n`;\n","import { FC, useEffect, useRef, useState } from 'react';\nimport { useAppDispatch } from '../../hooks';\nimport { getTournaments } from '../../store/action-creators';\nimport { InputWrapper } from './styled';\n\ntype Props = {\n  placeholder?: string;\n};\n\nexport const Input: FC<Props> = ({ placeholder }) => {\n  const [filter, setFilter] = useState('');\n  const inputRef = useRef();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (filter === (inputRef.current as any).value) {\n        dispatch(getTournaments(filter));\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [filter, inputRef]);\n\n  return (\n    <InputWrapper\n      ref={inputRef as any}\n      placeholder={placeholder}\n      onChange={event => setFilter(event.target.value)}\n      value={filter}\n    ></InputWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport theme from '../../theme';\n\nconst Button = styled.button`\n  background: transparent;\n  border: 1px solid ${theme.palette.secondary.main};\n  border-radius: ${theme.borderRadius};\n  color: ${theme.palette.primary.main};\n  padding: ${theme.spacing(2)};\n  ${theme.typography.button};\n\n  &:hover {\n    border: 1px solid ${theme.palette.secondary.light};\n    color: ${theme.palette.primary.light};\n  }\n\n  &:active {\n    border: 1px solid ${theme.palette.secondary.dark};\n    color: ${theme.palette.primary.dark};\n  }\n`;\n\nexport const Styled = { Button };\n","import React, { FC } from 'react';\nimport { Styled } from './styled';\nimport { ReactNode } from 'react';\n\ntype ButtonProps = {\n  children: ReactNode;\n  onClick?: () => void;\n};\n\nexport const Button: FC<ButtonProps> = ({ children, onClick }: ButtonProps) => {\n  return <Styled.Button onClick={onClick}>{children}</Styled.Button>;\n};\n","import styled from 'styled-components';\nimport theme from '../../theme';\n\nexport const CardFrame = styled.div`\n  border-radius: 4px;\n  background: ${theme.palette.background.base};\n  padding: 16px;\n\n  p {\n    margin-top: 0px;\n    margin-bottom: 0px;\n  }\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  column-gap: 8px;\n  margin-top: 8px;\n`;\n\nexport const Grid = styled.div`\n  margin-top: 24px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 24px;\n`;\n","import React, { FC } from 'react';\nimport moment from 'moment';\nimport 'moment/locale/en-gb';\nimport { Tournament } from '../../store/reducers';\nimport { Button } from '../Button/Button';\nimport { Text } from '../Text/Text';\nimport { ButtonsWrapper, CardFrame } from './styled';\n\nmoment.locale('en-gb');\n\ntype Props = {\n  tournament: Tournament;\n  onConfirmEdit: (name: string) => void;\n  onConfirmDelete: () => void;\n};\n\nexport const Card: FC<Props> = ({\n  tournament,\n  onConfirmEdit,\n  onConfirmDelete\n}) => {\n  const { name, organizer, game, participants, startDate } = tournament;\n\n  const handleOnEditClick = (newName: string | null) => {\n    if (newName) {\n      onConfirmEdit(newName);\n    }\n  };\n\n  const handleOnDeleteClick = () => {\n    if (window.confirm('Do you really want to delete this tournament?')) {\n      onConfirmDelete();\n    }\n  };\n\n  return (\n    <CardFrame>\n      <Text textType=\"h6\">{name}</Text>\n      <Text>Organizer: {organizer}</Text>\n      <Text>Game: {game}</Text>\n      <Text>\n        Participants: {participants.current}/{participants.max}\n      </Text>\n      <Text>Start: {moment(startDate).format('DD/MM/YYYY, HH:mm:ss')}</Text>\n      <ButtonsWrapper>\n        <Button\n          onClick={() =>\n            handleOnEditClick(prompt('New Tournament Name:', name))\n          }\n        >\n          EDIT\n        </Button>\n        <Button onClick={handleOnDeleteClick}>DELETE</Button>\n      </ButtonsWrapper>\n    </CardFrame>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport styled from 'styled-components';\nimport GlobalStyle from './GlobalStyle';\nimport { store } from './store/store';\nimport Container from './components/Container/Container';\nimport { Text } from './components/Text/Text';\nimport { Input } from './components/Input/Input';\nimport { Card } from './components/Card/Card';\nimport { Button } from './components/Button/Button';\nimport { Tournament } from './store/reducers';\nimport {\n  addTournament,\n  deleteTournament,\n  editTournament,\n  getTournaments\n} from './store/action-creators';\nimport { Styled } from './components/Text/styled';\nimport { Grid } from './components/Card/styled';\nimport { useAppDispatch, useAppSelector } from './hooks';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst CenteredWrapper = styled.div`\n  margin-top: 48px;\n  text-align: center;\n`;\n\nconst App: React.FC = () => {\n  const tournaments = useAppSelector(state => state.tournaments);\n  const loading = useAppSelector(state => state.loading);\n  const error = useAppSelector(state => state.error);\n  const dispatch = useAppDispatch();\n\n  const handleCreateTournament = (name: string | null) => {\n    if (name) {\n      dispatch(addTournament(name));\n    }\n  };\n\n  const handleEditTournament = (tournament: Tournament) => {\n    dispatch(editTournament(tournament));\n  };\n\n  const handleDeleteTournament = (id: string) => {\n    dispatch(deleteTournament(id));\n  };\n\n  const handleRetry = () => {\n    dispatch(getTournaments(''));\n  };\n\n  return (\n    <Container>\n      <Text textType=\"h4\">Tournaments</Text>\n      <Wrapper>\n        <Input placeholder=\"Search tournament ...\"></Input>\n        <Button\n          onClick={() => handleCreateTournament(prompt('Tournament Name:'))}\n        >\n          CREATE TOURNAMENT\n        </Button>\n      </Wrapper>\n      {loading && (\n        <Styled.CenteredTextWrapper>\n          <Text>Loading tournaments...</Text>\n        </Styled.CenteredTextWrapper>\n      )}\n      {error && (\n        <CenteredWrapper>\n          <Text>Something went wrong.</Text>\n          <Button onClick={handleRetry}>RETRY</Button>\n        </CenteredWrapper>\n      )}\n      {tournaments.length > 0 && (\n        <Grid>\n          {tournaments.map((tournament: Tournament) => (\n            <Card\n              key={tournament.id}\n              tournament={tournament}\n              onConfirmEdit={(name: string) =>\n                handleEditTournament({ ...tournament, name })\n              }\n              onConfirmDelete={() => handleDeleteTournament(tournament.id)}\n            ></Card>\n          ))}\n        </Grid>\n      )}\n      {tournaments.length === 0 && (\n        <Styled.CenteredTextWrapper>\n          <Text>No tournaments found</Text>\n        </Styled.CenteredTextWrapper>\n      )}\n    </Container>\n  );\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <GlobalStyle />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}